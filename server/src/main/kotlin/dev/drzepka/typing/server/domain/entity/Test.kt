package dev.drzepka.typing.server.domain.entity

import dev.drzepka.typing.server.domain.exception.TestException
import dev.drzepka.typing.server.domain.value.TestState
import dev.drzepka.typing.server.domain.value.WordSelection
import java.time.Duration
import java.time.Instant

@Suppress("LeakingThis")
open class Test(
    var testDefinition: TestDefinition,
    var takenBy: User,
    /** Words generated by the application that user has to transcribe. */
    var selectedWords: WordSelection
) : AbstractEntity<Int>() {

    var createdAt: Instant = now()
    var wordRegenerationCount = 0

    var startedAt: Instant? = null
    var finishedAt: Instant? = null

    var startTimeLimit: Duration? = null
    var finishTimeLimit: Duration? = null

    /** Words enetered by the user. */
    var enteredWords: WordSelection? = null
    var backspaceCount: Int? = null

    val state: TestState
        get() = when {
            finishedAt != null -> TestState.FINISHED
            finishedAt == null && finishTimeLimit != null && now().isAfter(startedAt!!.plus(finishTimeLimit)) -> TestState.STARTED_TIMEOUT
            startedAt != null && finishedAt == null -> TestState.STARTED
            startedAt == null && startTimeLimit != null && now().isAfter(createdAt.plus(startTimeLimit)) -> TestState.CREATED_TIMEOUT
            startedAt == null && finishedAt == null -> TestState.CREATED
            else -> throw IllegalStateException(
                String.format(
                    "Illegal test state (startedAt: %s, finishedAt: %s, startTimeLimit: %s, finishTimeLimit: %s)",
                    startedAt,
                    finishedAt,
                    startTimeLimit,
                    finishTimeLimit
                )
            )
        }

    fun start() {
        if (state == TestState.CREATED_TIMEOUT)
            throw TestException("Time limit for starting the test has been exceeded.")

        startedAt = now()
    }

    fun finish() {
        if (state == TestState.STARTED_TIMEOUT)
            throw TestException("Time limit for finishing the test has been exceeded.")

        finishedAt = now()
    }

    fun incrementWordRegenerationCounter() {
        wordRegenerationCount++
    }

    protected open fun now(): Instant = Instant.now()
}